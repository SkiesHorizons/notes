// This file is auto-generated by @hey-api/openapi-ts

import type { Options as ClientOptions, TDataShape, Client } from "./client"
import type {
  RegisterData,
  RegisterResponses,
  RegisterErrors,
  LoginData,
  LoginResponses,
  LoginErrors,
  ListNotesData,
  ListNotesResponses,
  CreateNoteData,
  CreateNoteResponses,
  CreateNoteErrors,
  DeleteNoteData,
  DeleteNoteResponses,
  DeleteNoteErrors,
  GetNoteByIdData,
  GetNoteByIdResponses,
  GetNoteByIdErrors,
  PatchNoteData,
  PatchNoteResponses,
  PatchNoteErrors,
  GetCurrentUserData,
  GetCurrentUserResponses,
  GetCurrentUserErrors,
} from "./types.gen"
import {
  zRegisterData,
  zLoginData,
  zListNotesData,
  zCreateNoteData,
  zDeleteNoteData,
  zGetNoteByIdData,
  zPatchNoteData,
  zGetCurrentUserData,
} from "./zod.gen"
import { client as _heyApiClient } from "./client.gen"

export type Options<TData extends TDataShape = TDataShape, ThrowOnError extends boolean = boolean> = ClientOptions<
  TData,
  ThrowOnError
> & {
  /**
   * You can provide a client instance returned by `createClient()` instead of
   * individual options. This might be also useful if you want to implement a
   * custom client.
   */
  client?: Client
  /**
   * You can pass arbitrary values through the `meta` object. This can be
   * used to access values that aren't defined as part of the SDK function.
   */
  meta?: Record<string, unknown>
}

/**
 * Register a new user
 * Creates a new user account with the provided registration details.
 */
export const register = <ThrowOnError extends boolean = false>(options?: Options<RegisterData, ThrowOnError>) => {
  return (options?.client ?? _heyApiClient).post<RegisterResponses, RegisterErrors, ThrowOnError>({
    requestValidator: async (data) => {
      return await zRegisterData.parseAsync(data)
    },
    url: "/auth/register",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
  })
}

/**
 * User login
 * Authenticates a user and returns access tokens.
 */
export const login = <ThrowOnError extends boolean = false>(options?: Options<LoginData, ThrowOnError>) => {
  return (options?.client ?? _heyApiClient).post<LoginResponses, LoginErrors, ThrowOnError>({
    requestValidator: async (data) => {
      return await zLoginData.parseAsync(data)
    },
    url: "/auth/login",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
  })
}

/**
 * List all notes
 */
export const listNotes = <ThrowOnError extends boolean = false>(options?: Options<ListNotesData, ThrowOnError>) => {
  return (options?.client ?? _heyApiClient).get<ListNotesResponses, unknown, ThrowOnError>({
    requestValidator: async (data) => {
      return await zListNotesData.parseAsync(data)
    },
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/notes",
    ...options,
  })
}

/**
 * Create a new note
 */
export const createNote = <ThrowOnError extends boolean = false>(options?: Options<CreateNoteData, ThrowOnError>) => {
  return (options?.client ?? _heyApiClient).post<CreateNoteResponses, CreateNoteErrors, ThrowOnError>({
    requestValidator: async (data) => {
      return await zCreateNoteData.parseAsync(data)
    },
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/notes",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
  })
}

/**
 * Delete a note
 */
export const deleteNote = <ThrowOnError extends boolean = false>(options: Options<DeleteNoteData, ThrowOnError>) => {
  return (options.client ?? _heyApiClient).delete<DeleteNoteResponses, DeleteNoteErrors, ThrowOnError>({
    requestValidator: async (data) => {
      return await zDeleteNoteData.parseAsync(data)
    },
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/notes/{noteId}",
    ...options,
  })
}

/**
 * Get a note by ID
 */
export const getNoteById = <ThrowOnError extends boolean = false>(options: Options<GetNoteByIdData, ThrowOnError>) => {
  return (options.client ?? _heyApiClient).get<GetNoteByIdResponses, GetNoteByIdErrors, ThrowOnError>({
    requestValidator: async (data) => {
      return await zGetNoteByIdData.parseAsync(data)
    },
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/notes/{noteId}",
    ...options,
  })
}

/**
 * Update an existing note
 */
export const patchNote = <ThrowOnError extends boolean = false>(options: Options<PatchNoteData, ThrowOnError>) => {
  return (options.client ?? _heyApiClient).patch<PatchNoteResponses, PatchNoteErrors, ThrowOnError>({
    requestValidator: async (data) => {
      return await zPatchNoteData.parseAsync(data)
    },
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/notes/{noteId}",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options.headers,
    },
  })
}

/**
 * Get current user
 * Retrieve the details of the currently authenticated user.
 */
export const getCurrentUser = <ThrowOnError extends boolean = false>(
  options?: Options<GetCurrentUserData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<GetCurrentUserResponses, GetCurrentUserErrors, ThrowOnError>({
    requestValidator: async (data) => {
      return await zGetCurrentUserData.parseAsync(data)
    },
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/users/@me",
    ...options,
  })
}
