// This file is auto-generated by @hey-api/openapi-ts

import {
  type Options,
  register,
  login,
  listNotes,
  createNote,
  deleteNote,
  getNoteById,
  patchNote,
  getCurrentUser,
} from "../sdk.gen"
import { queryOptions, type UseMutationOptions, type DefaultError } from "@tanstack/react-query"
import type {
  RegisterData,
  RegisterResponse,
  LoginData,
  LoginResponse,
  ListNotesData,
  CreateNoteData,
  CreateNoteResponse,
  DeleteNoteData,
  DeleteNoteResponse,
  GetNoteByIdData,
  PatchNoteData,
  PatchNoteResponse,
  GetCurrentUserData,
} from "../types.gen"
import { client as _heyApiClient } from "../client.gen"

export type QueryKey<TOptions extends Options> = [
  Pick<TOptions, "baseUrl" | "body" | "headers" | "path" | "query"> & {
    _id: string
    _infinite?: boolean
  },
]

const createQueryKey = <TOptions extends Options>(
  id: string,
  options?: TOptions,
  infinite?: boolean,
): [QueryKey<TOptions>[0]] => {
  const params: QueryKey<TOptions>[0] = {
    _id: id,
    baseUrl: (options?.client ?? _heyApiClient).getConfig().baseUrl,
  } as QueryKey<TOptions>[0]
  if (infinite) {
    params._infinite = infinite
  }
  if (options?.body) {
    params.body = options.body
  }
  if (options?.headers) {
    params.headers = options.headers
  }
  if (options?.path) {
    params.path = options.path
  }
  if (options?.query) {
    params.query = options.query
  }
  return [params]
}

export const registerQueryKey = (options?: Options<RegisterData>) => createQueryKey("register", options)

/**
 * Register a new user
 * Creates a new user account with the provided registration details.
 */
export const registerQueryOptions = (options?: Options<RegisterData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await register({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      })
      return data
    },
    queryKey: registerQueryKey(options),
  })
}

/**
 * Register a new user
 * Creates a new user account with the provided registration details.
 */
export const registerMutationOptions = (
  options?: Partial<Options<RegisterData>>,
): UseMutationOptions<RegisterResponse, DefaultError, Options<RegisterData>> => {
  const mutationOptions: UseMutationOptions<RegisterResponse, DefaultError, Options<RegisterData>> = {
    mutationFn: async (localOptions) => {
      const { data } = await register({
        ...options,
        ...localOptions,
        throwOnError: true,
      })
      return data
    },
  }
  return mutationOptions
}

export const loginQueryKey = (options?: Options<LoginData>) => createQueryKey("login", options)

/**
 * User login
 * Authenticates a user and returns access tokens.
 */
export const loginQueryOptions = (options?: Options<LoginData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await login({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      })
      return data
    },
    queryKey: loginQueryKey(options),
  })
}

/**
 * User login
 * Authenticates a user and returns access tokens.
 */
export const loginMutationOptions = (
  options?: Partial<Options<LoginData>>,
): UseMutationOptions<LoginResponse, DefaultError, Options<LoginData>> => {
  const mutationOptions: UseMutationOptions<LoginResponse, DefaultError, Options<LoginData>> = {
    mutationFn: async (localOptions) => {
      const { data } = await login({
        ...options,
        ...localOptions,
        throwOnError: true,
      })
      return data
    },
  }
  return mutationOptions
}

export const listNotesQueryKey = (options?: Options<ListNotesData>) => createQueryKey("listNotes", options)

/**
 * List all notes
 */
export const listNotesQueryOptions = (options?: Options<ListNotesData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await listNotes({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      })
      return data
    },
    queryKey: listNotesQueryKey(options),
  })
}

export const createNoteQueryKey = (options?: Options<CreateNoteData>) => createQueryKey("createNote", options)

/**
 * Create a new note
 */
export const createNoteQueryOptions = (options?: Options<CreateNoteData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await createNote({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      })
      return data
    },
    queryKey: createNoteQueryKey(options),
  })
}

/**
 * Create a new note
 */
export const createNoteMutationOptions = (
  options?: Partial<Options<CreateNoteData>>,
): UseMutationOptions<CreateNoteResponse, DefaultError, Options<CreateNoteData>> => {
  const mutationOptions: UseMutationOptions<CreateNoteResponse, DefaultError, Options<CreateNoteData>> = {
    mutationFn: async (localOptions) => {
      const { data } = await createNote({
        ...options,
        ...localOptions,
        throwOnError: true,
      })
      return data
    },
  }
  return mutationOptions
}

/**
 * Delete a note
 */
export const deleteNoteMutationOptions = (
  options?: Partial<Options<DeleteNoteData>>,
): UseMutationOptions<DeleteNoteResponse, DefaultError, Options<DeleteNoteData>> => {
  const mutationOptions: UseMutationOptions<DeleteNoteResponse, DefaultError, Options<DeleteNoteData>> = {
    mutationFn: async (localOptions) => {
      const { data } = await deleteNote({
        ...options,
        ...localOptions,
        throwOnError: true,
      })
      return data
    },
  }
  return mutationOptions
}

export const getNoteByIdQueryKey = (options: Options<GetNoteByIdData>) => createQueryKey("getNoteById", options)

/**
 * Get a note by ID
 */
export const getNoteByIdQueryOptions = (options: Options<GetNoteByIdData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getNoteById({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      })
      return data
    },
    queryKey: getNoteByIdQueryKey(options),
  })
}

/**
 * Update an existing note
 */
export const patchNoteMutationOptions = (
  options?: Partial<Options<PatchNoteData>>,
): UseMutationOptions<PatchNoteResponse, DefaultError, Options<PatchNoteData>> => {
  const mutationOptions: UseMutationOptions<PatchNoteResponse, DefaultError, Options<PatchNoteData>> = {
    mutationFn: async (localOptions) => {
      const { data } = await patchNote({
        ...options,
        ...localOptions,
        throwOnError: true,
      })
      return data
    },
  }
  return mutationOptions
}

export const getCurrentUserQueryKey = (options?: Options<GetCurrentUserData>) =>
  createQueryKey("getCurrentUser", options)

/**
 * Get current user
 * Retrieve the details of the currently authenticated user.
 */
export const getCurrentUserQueryOptions = (options?: Options<GetCurrentUserData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getCurrentUser({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      })
      return data
    },
    queryKey: getCurrentUserQueryKey(options),
  })
}
